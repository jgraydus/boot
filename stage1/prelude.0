;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; special forms (i.e. symbols that are interpreted in a special way)
; fn - creates a procedure
; macro - creates a macro. a macro is a procedure, but macro application 
;         does not evaluate the arguments passed to the macro
; quote, unquote - the argument of quote is evaluated in a special way:
                     - (unquote x) returns the regular evaluation of x
                     - a list returns a list consisting of the quote evaluation of each element
                     - every other type of object returns itself unevaluated
; define - adds a new binding to the current environment
; if - if/then/else expression. only the condition and the chosen branch are evaluated
; loop - evaluates its arguments from left to right and then repeats forever
;
; intrinsics (i.e. built-in functions):
; env - gives the environment of the current scope
; cons, list, head, tail, nil?
; bool - converts truthy values to #t and falsey values to #f
; +, -, *, /, mod
; =, <, >
; exit - stops the program
; print - print a string representation of its argument
; read-line - read a single line from stdin (excludes the newline character)
; read-file - reads in a file as a string
; parse - convert a string into an S-exp
; eval - evaluate an S-exp
; gen-sym - create a guaranteed unique symbol
; string-append, string-length, substring
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define imported-modules (list nil))

(define import
   (fn (filepath)
      (define base-env (head (env)))
      (if (nil? (filter (fn (x) (= x filepath)) (head imported-modules)))
         ((fn ()
            (set-head! imported-modules (cons filepath (head imported-modules)))
            (define p (parse (read-file filepath)))
            ; evaluate in the parent environment
            (eval p base-env)
         ))
         nil)))

; transform into the application of a 0-arity function containing a 'define' for each binding
(define let
   (macro (bindings body)
      (define make-def 
         (fn (b)
            (quote (define (unquote (head b)) 
                           (unquote (nth 1 b))))))
      (define defs (map make-def bindings))
      (list
         (concat (quote (fn ()))
                 (concat defs (list body))))))

; cond expands into nested ifs
(define cond
   (macro (cs)
      (define build
         (fn (cs)
            (if (nil? cs)
                ()
                (let ((first (head cs))
                      (rest  (tail cs))
                      (pred (head first))
                      (body (head (tail first))))
                   (quote (if (unquote pred) (unquote body) (unquote (build rest))))))))
      (build cs)))


(define not (fn (x) (if x #f #t)))

; there is an intrinsic 'and', but it isn't short-circuiting
(define and
   (macro (x y)
      (quote (let ((z (unquote x))) (if (not z) z (unquote y))))))

(define or
   (macro (x y)
      (quote (let ((z (unquote x))) (if z z (unquote y))))))

(define <=
   (fn (x y) (or (= x y) (< x y))))

(define >=
   (fn (x y) (or (= x y) (> x y))))

(define map 
  (fn (f xs)
    (if (nil? xs) ()
        (cons (f (head xs)) (map f (tail xs))))))

(define reduce
  (fn (f z xs)
    (if (nil? xs) z
        (reduce f (f z (head xs)) (tail xs)))))

(define filter
  (fn (p xs)
      (if (nil? xs) ()
          (if (p (head xs))
              (cons (head xs) (filter p (tail xs)))
              (filter p (tail xs))))))

(define zip
   (fn (xs ys)
      (if (or (nil? xs) (nil? ys)) ()
          (cons (list (head xs) (head ys)) 
                (zip (tail xs) (tail ys))))))

(define unzip
   (fn (xs)
      (if (nil? xs) (list () ())
         (let ((first (head xs))
               (x (head first))
               (y (nth 1 first))
               (rest (unzip (tail xs)))
               (xs (head rest))
               (ys (nth 1 rest)))
            (list (cons x xs) (cons y ys))))))

(define length
  (fn (xs)
    (if (nil? xs) 0
        (+ 1 (length (tail xs))))))

(define const (fn (x) (fn (_) x)))

(define nth
   (fn (n xs)
      (if (= 0 n) (head xs)
                  (nth (- n 1) (tail xs)))))

(define last
   (fn (xs)
      (if (nil? xs) nil
      (if (nil? (tail xs)) (head xs)
          (last (tail xs))))))

(define take
  (fn (n xs)
     (if (or (nil? xs) (= n 0)) ()
         (cons (head xs) (take (- n 1) (tail xs))))))

(define drop
  (fn (n xs)
      (if (nil? xs) ()
          (if (= n 0) xs
              (drop (- n 1) (tail xs))))))

(define concat
  (fn (xs ys)
     (if (nil? xs) ys
         (cons (head xs) (concat (tail xs) ys)))))

(define reverse
  (fn (xs) 
    (define snoc (fn (xs x) (cons x xs)))
    (reduce snoc () xs)))

(define sum
  (fn (xs)
    (reduce + 0 xs)))

(define prod
  (fn (xs)
    (reduce * 1 xs)))

(define range
   (fn (start end)
      (if (> start end) () (cons start (range (+ start 1) end)))))

(define string-to-list
  (fn (str)
     (define len (string-length str))
     (define go
        (fn (n)
           (if (= n len) nil (cons (char-at n str) (go (+ 1 n))))))
     (go 0)))

(define join
   (fn (strs)
      (reduce
         (fn (acc next) (string-append acc next))
         ""
         strs)))

(define to-lower-case
   ((fn ()
      (define A (ord "A"))
      (define Z (ord "Z"))
      (define cond
         (fn (c)
            (define c' (ord c))
            (and (>= c' A) (<= c' Z))))
      (define mk-lower
         (fn (c) (if (cond c) (chr (+ (ord c) 32)) c)))
      (fn (str)
         (join
            (map
               mk-lower
               (string-to-list str)))))))

(define to-upper-case
   ((fn ()
      (define a (ord "a"))
      (define z (ord "z"))
      (define cond
         (fn (c)
            (define c' (ord c))
            (and (>= c' a) (<= c' z))))
      (define mk-upper
         (fn (c) (if (cond c) (chr (- (ord c) 32)) c)))
      (fn (str)
         (join
            (map
               mk-upper
               (string-to-list str)))))))

(define char-at
   (fn (n str) (substring n (+ n 1) str)))

(define starts-with?
   (fn (str src)
      (let ((n (string-length str))
            (m (string-length src)))
        (if (> n m) #f (= str (substring 0 n src))))))

; todo replace with a better algorithm
(define index-of
   (fn (str src)
      (define n (string-length str))
      (define stop (- (string-length src) n))
      (define go (fn (start)
          (if (> start stop) ()
              (if (starts-with? str (substring start (+ start n) src)) start
                  (go (+ 1 start))))))
      (go 0)))

(define exit-with-msg
   (fn (msg code)
      (print msg)
      (print code)
      (exit code)))

(define assert
   (fn (exp desc)
      (if (not exp) (exit-with-msg desc 1) nil)))

(define list-to-array
   (fn (xs)
      (define size (length xs))
      (define arr (make-array size))
      (map
         (fn (next) (array-set! arr (head next) (nth 1 next)))
         (zip (range 0 (- size 1)) xs))
      arr))

(define array-to-list
   (fn (arr)
      (define size (array-size arr))
      (map (fn (i) (array-get arr i)) (range 0 (- size 1)))))

(define set-nth!
   (fn (xs i v)
      (if (= i 0) (set-head! xs v) (set-nth! (tail xs) (- i 1) v))))

(define min (fn (a b) (if (< a b) a b)))
(define max (fn (a b) (if (> a b) a b)))

